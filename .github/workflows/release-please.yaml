name: Release-Please

on:
    push:
        branches:
            - main
    workflow_dispatch:

permissions:
    contents: write
    pull-requests: write
    issues: write
    packages: write

jobs:
    release-please:
        runs-on: ubuntu-latest
        outputs:
            release_created: ${{ steps.release.outputs.release_created }}
            tag_name: ${{ steps.release.outputs.tag_name }}

        steps:
            - uses: GoogleCloudPlatform/release-please-action@v4
              id: release
              with:
                  release-type: simple

    build-docker:
        needs: release-please
        runs-on: ubuntu-latest
        if: ${{ needs.release-please.outputs.release_created == 'true' }}

        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}-docker

        outputs:
            imageid: ${{ steps.docker-build.outputs.imageid }}
            digest: ${{ steps.docker-build.outputs.digest }}

        steps:
            - name: Checkout source
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Ensures full history for accurate build context if needed

            - name: Set up QEMU for multi-platform builds
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx (build tool for multi-platform and caching)
              uses: docker/setup-buildx-action@v3
              with:
                  buildkitd-flags: --debug # Optional: Enables BuildKit debug logs

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  # Docker registry hostname (GHCR)
                  registry: ghcr.io
                  # GitHub actor = user triggering the workflow
                  username: ${{ github.actor }}
                  # GitHub token with permission to push to GHCR
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set lowercase owner name
              id: owner-name
              run: |
                  echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
                  echo "Lowercase owner name: $(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')"

            - name: Build and push Docker image
              id: docker-build
              uses: docker/build-push-action@v6
              with:
                  # Docker build context (current repo)
                  context: .
                  # Dockerfile path (default is ./Dockerfile)
                  file: ./Dockerfile
                  # Platforms to build for (multi-arch)
                  platforms: linux/amd64,linux/arm64
                  # Push image to registry after build
                  push: true
                  # Upload SBOM (Software Bill of Materials) for reproducibility/security
                  sbom: true
                  # Upload provenance attestation (where and how the image was built)
                  provenance: true
                  # Use GitHub Actions cache to reuse previous build layers
                  cache-from: type=gha
                  # Save cache for future builds (maximum mode = aggressive caching)
                  cache-to: type=gha,mode=max
                  # Image tags to push
                  tags: |
                      ghcr.io/${{ steps.owner-name.outputs.OWNER_LC }}/${{ github.event.repository.name }}:${{ needs.release-please.outputs.tag_name }}
                      ghcr.io/${{ steps.owner-name.outputs.OWNER_LC }}/${{ github.event.repository.name }}:latest

    run-pipeline:
        needs: [release-please, build-docker]
        runs-on: ubuntu-latest
        if: ${{ needs.release-please.outputs.release_created == 'true' }}

        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}-pipeline

        steps:
            - name: Checkout source
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.release-please.outputs.tag_name }}

            - name: Run PharmacoSet Pipeline
              uses: ./.github/actions/run-pipeline
              with:
                  artifact-name: gCSI-TreatmentResponseExperiment
                  result-path: data/results/gCSI_treatmentResponseExperiment.RDS
                  release-tag: ${{ needs.release-please.outputs.tag_name }}
